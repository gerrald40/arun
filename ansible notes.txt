
● A control node is installed with Ansible and is used to run playbooks
	○ Contains the Ansible Engine software and the playbook and its supporting materials
	○ Red Hat Ansible Tower provides a central web interface, authentication, and API for Ansible

● A managed host is a machine that is managed by Ansible automation
	○ Does not have Ansible installed
	○ Does need to be configured to allow Ansible to connect to the host
	○ Must be listed in the inventory (or generated by a dynamic inventory script or plugin)

● Red Hat Ansible Tower helps you control, secure and centrally manage Ansible automation.
● Can be your authoritative control node to run playbooks.
● Has a web-based user interface and a RESTful API.
● Users with no Linux experience can use the web-based UI to easily run Ansible.
● Different users have different levels of access to playbooks, hosts, and authentication credentials.
● Allows central tracking and logging of automation jobs.
● Makes it easy to manage and use different versions of playbooks under a version control system

Some Use Cases for Ansible
● Configuration Management
	○ Centralizing configuration file management and deployment.
● Application Deployment
	○ Effectively manage the entire application life cycle from deployment to production.
● Provisioning
	○ Streamline the provisioning process. 
● Continuous Delivery
	○ Create a CI/CD pipeline using Ansible playbooks.
● Security and Compliance
	○ Define security policy using Ansible playbooks.
● Orchestration
	○ Define how multiple configurations interact
	
The Ansible Way
● Complexity Kills Productivity
	○ Simpler is better.
● Optimize for Readability
	○ Ansible Playbooks can clearly document your workflow automation.
● Think Declaratively
	○ Ansible is a desired-state engine.
	○ Ansible is not a scripting language and should not be treated as one.

Recommended Ansible Architecture for Windows
● Use Red Hat Ansible Tower as the control node
● Store Ansible Playbooks in Git (or another version control system)
● Edit Ansible Playbooks in a text editor, like Visual Studio Code, that can directly work with Git

Why Red Hat Ansible Tower?
● Web-based user interface simplifies operation of Ansible for users with no Linux experience 
● It can automatically grab the latest playbook from Git (or be pinned to use a specific version)
● Authentication and permissions system helps manage who can change which hosts, use specific host 
credentials, run certain playbooks, and so on
● The central service enables logging of playbook runs and auditing of events
● It provides a REST API that can be integrated with automated DevOps workflows

Installing Red Hat Ansible Tower
22
● Downloads a compressed archive file named something like:
○ ansible-tower-setup-bundle-3.6.2-1.tar.gz
● Extract the archive file on your Linux system:
○ tar zxf ansible-tower-setup-bundle-3.6.2-1.tar.gz
● In the unpacked directory, edit the inventory file
○ Set your admin_password (will be used for the “admin” user to log in)
○ Set the pg_password and rabbitmq_password 
● Run the install script in the unpacked directory
○ ./setup.sh

Introducing Git
28
● Git is a distributed version control system.
● It allows users to manage changes to files in a collaborative manner.
● Each version of a file is committed to the system.
● Old versions of files can be restored, and a log of who made the changes is maintained

Benefits of Git for Ansible
29
● Review and restore older revisions of Ansible Playbooks
● Compare two revisions of the same playbook to identify what changed
● Each change is logged: includes who did it, when, and message about why
● Editors can modify playbooks and other files, resolve conflicting changes, merge changes together
● Can make it easier to manage production and testing versions of files
○ Can use the latest version of a playbook in a particular branch
○ Can use a specific revision of a playbook
